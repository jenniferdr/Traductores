#!/usr/bin/python

# Proyecto I: Reconocedor de Patrones
# Autores: Jennifer Dos Reis 08-10323
#          Hancel Gonzalez   07-40983

import sys
import funciones
import grafo
import re

if('-' in sys.argv):
	sys.argv.remove('-')

if(len(sys.argv) < 3):
	print "Faltan parametros"
	sys.exit(0)
elif((len(sys.argv) == 3) and ((sys.argv[1][0] != '+' and sys.argv[1][0] != '-')
			       or sys.argv[2][0] == '+' or sys.argv[2][0] == '-')):
	print "Parametros invalidos"
	sys.exit(0)
    
(palabras,archivos) = funciones.extraerArgumentos(sys.argv)

if((len(palabras) == 0) or (len(archivos) == 0)):
	print ("Faltan parametros: debe haber por lo menos una palabra y"
	       "un archivo")
	sys.exit(0)
    
files = funciones.procesarArchivos(archivos)
if(len(files) == 0):
	sys.exit(0)

# Obtener un diccionario de palabras permitidas y lista de prohibidas
(dic_permitidas,list_prohibidas) =funciones.procesarPalabras(palabras)

# Lista de letras pertenecientes a las palabras prohibidas
listaLP= funciones.listaLetras(list_prohibidas)

# DFA formado con las letras de las palabras prohibidas
dfa= funciones.dfaPalabras(listaLP,list_prohibidas)

# Expresion regular de palabras formadas con las letras
# de palabras prohibidas. 
palabras_LP = dfa.convertirDFA_ER()

# ER para representar cualquier caracter menos las que aparecen
# en las palabras prohibidas
strLNP="[^"
for l in listaLP:
    strLNP += l
strLNP += "]"

# ER para representar cualquier palabra menos las prohibidas
if(len(strLNP)>3):
    NP= "(?:"+strLNP+"*(?:"+palabras_LP+strLNP+"+|"+strLNP+")*"+palabras_LP+"?)"
else:
    NP= ".*"
    
# Con todas sus permutaciones de palabras en diccionario 
if(len(dic_permitidas)>0):
    ER = funciones.crearER(dic_permitidas,NP)
else:
    ER= NP
    
print ER
ER= "^"+ER+"$"
expReg= re.compile(ER)

# Evaluacion de la expresion regular ER en cada linea
# de cada archivo aportado
for file in files:
    for line in file:
        if(expReg.match(line)):
           print file.name + ": " + line
    file.close()
